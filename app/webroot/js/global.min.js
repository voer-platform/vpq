$(function(){

	$('.avatar').error( function () {
		$(this).attr('src', PLS.ajaxUrl+'img/avatars/no_avatar.gif');
	});

	$('#open-notifications').click(function(){
		if($(this).attr('data-unread')>0)
		{
			$.ajax({
				type: 'POST',
				url: '/People/resetNotifyCounter',
				success: function(response){
					$(this).attr('data-unread', 0);
					$('.notify-counter').remove();
				}	
			});
		}
	});
	
	
	
	$('.notify-scroll').slimScroll({
        height: 'auto'
    });
	
	$('.table-scroll').slimScroll({
        height: 250
    });
	
	function showDialogMessage(args)
	{
		switch(args[0])
		{
			case 'error': textClass = 'danger'; break;
			case 'success': textClass = 'success'; break;
			default: textClass = 'warning';
		}

		$('#dialog-alert').removeClass().addClass('alert alert-'+textClass).html(args[1]).show();
		
		if(args[2])
		{
			$(document).find('#dialog form')[0].reset();
		}
	}
	
	function buildDialog(data)
	{
		$.get(PLS.ajaxUrl+data.url).success(function(response){
			width = '';
			callback = '';
			submitText = 'Cập nhật';
			cancelText = 'Đóng';
			showSubmit = true;
			showClose = true;
			errorText = 'Có sự cố xảy ra, vui lòng thử lại';
			
			if(data.errorText)
			{
				errorText = data.errorText;
			}
			if(data.showsubmit==false)
			{
				showSubmit = false;
			}
			if(data.showclose==false)
			{
				showClose = false;
			}
			if(data.textsubmit)
			{
				submitText = data.textsubmit;
			}
			if(data.width)
			{
				width = 'w-'+data.width;
			}
			
			dialogHtml = '<div class="modal" id="dialog"><div class="modal-dialog '+width+'"><div class="modal-content">';
			dialogHtml+= '<div class="modal-header"><button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>';
			dialogHtml+= '<h4 class="modal-title">'+data.title+'</h4></div>';
			dialogHtml+= '<div class="modal-body"><div class="alert" id="dialog-alert" style="display:none;"></div>';
			
			if (response) {
				dialogHtml+= response;
			} else {
				dialogHtml += '<p class="text-danger center">'+errorText+'</p>';
			}
			
			dialogHtml+= '</div><div class="modal-footer mgt-0">';
			if(showSubmit){
				dialogHtml+= '<button type="button" class="btn btn-primary" id="dialog-submit">'+submitText+'</button>';
			}
			
			if (data.customButton) {
				dialogHtml+=data.customButton;
			}
			
			if (showClose) {
				dialogHtml+= '<button type="button" class="btn btn-default" data-dismiss="modal">'+cancelText+'</button>';
			}	
			dialogHtml+= '</div></div></div></div>';
			dialog = $(dialogHtml);
			dialog.appendTo('body');
			dialog.modal()
			.on('hidden.bs.modal', function (e) {
				dialog.remove();
			});
			if(data.callback)
			{
				$(document).off('click', '#dialog-submit');
				$(document).on('click', '#dialog-submit', data.callback);
			}
			
			if(data.customButtonCallback)
			{
				$(document).off('click', '.custom-dialog-btn');
				$(document).on('click', '.custom-dialog-btn', data.customButtonCallback);
			}
			
			if (data.afterload) {
				$(document).on('loaded', dialog, data.afterload);
			}	
			dialog.trigger('loaded');
		});
	}
	
	$('#change-password').click(function(){
			buildDialog({
				title: 'Thay đổi mật khẩu', 
				url: 'people/changePassword', 
				width: 450, 
				textsubmit: 'Thay đổi',
				callback: function(){
							if($('#new-password').val()=='' || $('#current-password').val()=='')
							{
								showDialogMessage(['error', 'Vui lòng nhập đủ thông tin']);
							}
							else if($('#new-password').val()!=$('#renew-password').val())
							{
								showDialogMessage(['error', 'Hai mật khẩu phải giống nhau']);
							}
							else
							{
								postData = {
												'cpwd': $('#current-password').val(),
												'npwd': $('#new-password').val(),
												'rnpwd': $('#renew-password').val()
										   };
								$.post(PLS.ajaxUrl+'people/changePassword', postData, function(response){
									postResult = JSON.parse(response);
									if(postResult.code==1)
									{
										showDialogMessage(['success', postResult.mess, true]);
									}
									else
									{
										showDialogMessage(['error', postResult.mess]);
									}
								});
							}
						}
			});
		});
		
		
		//Question Sorting
		
		$('#open-sorting-panel').click(function(){
			handlerUrl = 'questions/sorting';
			buildDialog({
				title: 'Phân loại câu hỏi', 
				url: handlerUrl, 
				width: 600, 
				textsubmit: 'Xác nhận',
				errorText: 'Chưa có câu hỏi nào, bạn hãy quay lại sau nhé!',
				showclose: false,
				customButton: '<button class="btn btn-default custom-dialog-btn" id="skip-btn">Chọn câu khác</button>',
				customButtonCallback: function(){
					if ( $(this).attr('id') == 'skip-btn' ) {
						$.get(PLS.ajaxUrl+handlerUrl).success(function(response){
							$('#dialog .modal-body').html(response);
							MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
						});
					}
				},
				afterload: function(){
					$('#dialog .modal-footer').find('#go-advance-sorting').remove();
					$('#dialog .modal-footer').prepend('<a href="'+PLS.ajaxUrl+'classifyQuestion" class="btn btn-link pull-left" id="go-advance-sorting"><span class="glyphicon glyphicon-hand-right"></span> Xem nhiều câu hỏi hơn</a>');
					MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
				},
				callback: function(){
					question = $('#dialog #question').val();
					subcategory = $('#dialog #subcategory').val();
					
					if (question && subcategory) {
						if (confirm('Phân loại của bạn rất quan trọng đối với chúng tôi, bạn có chắc chắn muốn gửi?')) {
						
							$.post(PLS.ajaxUrl+handlerUrl, {'question': question, 'subcategory': subcategory}, function(response){
								postResult = JSON.parse(response);
								if (postResult.status == 1) {
									$.get(PLS.ajaxUrl+handlerUrl).success(function(response){
										$('#dialog .modal-body').html(response);
										$('#dialog .modal-body').prepend('<div class="alert alert-warning" id="dialog-alert">Phân loại của bạn đã được ghi nhận, hãy tiếp tục với câu hỏi bên dưới nhé!</div>');
										MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
									});
									mixpanel.track("Classify Question", {"classify_tool": "Quick"});
								} else {
									$('#dialog #dialog-alert').remove();
									$('#dialog .modal-body').prepend('<div class="alert alert-danger" id="dialog-alert">Có sự cố xảy ra, vui lòng thử lại hoặc nhấn nút "Chọn câu khác"</div>');
									// $('#sorting-error').html('Có sự cố xảy ra, vui lòng thử lại hoặc nhấn nút "Chọn câu khác"').show();
								
								}
								
							});
							
						}	
					}
					else
					{
						$('#sorting-error').html('Vui lòng chọn chương bài, nếu không biết bạn có thể nhấn nút "Chọn câu khác"').show();
					}
				}
			});
		});
		
		$(document).on('change', '#sorting-option select', function(){
			if ( $(this).attr('id')!='subcategory' ) {
				grade = $('#sorting-option #grade').val();
				subject = $('#sorting-option #subject').val();
				
				if ( $(this).attr('id')=='category' ) {
					category = $('#sorting-option #category').val();
				} else {
					category = '';
				}
				
				$.get(PLS.ajaxUrl+'ajax/sortingOption?grade='+grade+'&subject='+subject+'&category='+category).success(function(response){
					optionData = JSON.parse(response);
					console.log(optionData);
					if (optionData.hasOwnProperty('categories')) {
						
						$('#sorting-option #subcategory').html('<option value="">Chọn bài</option>');
						categoryOption = '<option value="">Chọn chương</option>';
						$.each(optionData.categories, function(id, name){
							categoryOption+='<option value="'+id+'">'+name+'</option>';
						});
						
						$('#sorting-option #category').html(categoryOption);
						
					} else if (optionData.hasOwnProperty('subcategories')) {
					
						subcategoryOption = '<option value="">Chọn bài</option>';
						$.each(optionData.subcategories, function(id, name){
							subcategoryOption+='<option value="'+id+'">'+name+'</option>';
						});
						
						$('#sorting-option #subcategory').html(subcategoryOption);
					
					}
					
				});
			}
		});
		
		//User sorting question page
		
		$(document).on('change', '.sorting-option select', function(){
			p = $(this).parents('.sorting-option');
			if ( !$(this).hasClass('sort-subcategory') ) {
				grade = p.find('.sort-grade').val();
				subject = p.find('.sort-subject').val();
				
				if ( $(this).hasClass('sort-category') ) {
					category = $(this).val();
				} else {
					category = '';
				}
				
				$.get(PLS.ajaxUrl+'ajax/sortingOption?grade='+grade+'&subject='+subject+'&category='+category).success(function(response){
					optionData = JSON.parse(response);
					console.log(optionData);
					if (optionData.hasOwnProperty('categories')) {
						
						p.find('.sort-subcategory').html('<option value="">Chọn bài</option>');
						categoryOption = '<option value="">Chọn chương</option>';
						$.each(optionData.categories, function(id, name){
							categoryOption+='<option value="'+id+'">'+name+'</option>';
						});
						
						p.find('.sort-category').html(categoryOption);
						
					} else if (optionData.hasOwnProperty('subcategories')) {
					
						subcategoryOption = '<option value="">Chọn bài</option>';
						$.each(optionData.subcategories, function(id, name){
							subcategoryOption+='<option value="'+id+'">'+name+'</option>';
						});
						
						p.find('.sort-subcategory').html(subcategoryOption);
					
					}
					
				});
			}
		});
		
		$(document).on('click', '.sorting-option .sort-submit', function(){
			question = $(this).parents('.sorting-option').find('.sort-question').val();
			subcategory = $(this).parents('.sorting-option').find('.sort-subcategory').val();
			if (question && subcategory) {
				return confirm('Phân loại của bạn rất quan trọng đối với chúng tôi, bạn có chắc chắn muốn gửi?');
			} else {	
				$(this).parents('.sorting-option').find('.sort-error').show();
				return false;
			}
			
		});
		
		//Login
		var loginSection = '';
		$('.login-open').click(function(){
			loginSection = $(this).attr('data-section');
			console.log(loginSection);
		});
		mixpanel.track_links(".mix-login", "Login", function(e){
			return {"login_section": loginSection, "login_method": "facebook", "inner_referal": PLS.innerRef};
		});	
		
		
		$('#login-btn').click(function(){
			email = $('#login-email').val();
			password = $('#login-password').val();
			if(email && password)
			{
				$.ajax({
					type: 'POST',
					url: PLS.ajaxUrl+'people/login',
					data: {'email': email, 'password': password},
					success: function(response){
						response = JSON.parse(response);
						mess = '';
						if(parseInt(response.code)==1)
						{
							$('#login-mess').removeClass('alert-danger').addClass('alert-success');
							mixpanel.track("Login", {"login_section": loginSection, "login_method": "normal", "inner_referal": PLS.innerRef});
							window.location.href = PLS.ajaxUrl+"/people/dashboard";
						}
						else
						{
							$('#login-mess').removeClass('alert-success').addClass('alert-danger');
						}
						$('#login-mess').html(response.mess).show();
					}
				});
			}
			else
			{
				$('#login-mess').removeClass('alert-success').addClass('alert-danger');
				$('#login-mess').html('Vui lòng điền đầy đủ thông tin').show();
			}
		});
		
		$('#forgot-btn').click(function(){
			email = $('#forgot-email').val();
			if(email)
			{
				$.ajax({
					type: 'POST',
					url: PLS.ajaxUrl+'api/forgotPassword',
					data: {'email': email},
					success: function(response){
						response = JSON.parse(response);
						mess = '';
						if(parseInt(response.code)==1)
						{
							$('#forgot-mess').removeClass('alert-danger').addClass('alert-success');
						}
						else
						{
							$('#forgot-mess').removeClass('alert-success').addClass('alert-danger');
						}
						$('#forgot-mess').html(response.mess).show();
					}
				});
			}
			else
			{
				$('#forgot-mess').removeClass('alert-success').addClass('alert-danger');
				$('#forgot-mess').html('Vui lòng điền đầy đủ thông tin').show();
			}
		});
		
		$('#show-forgot-form, #show-login-form').click(function(){
		
			forgotSection = $(this).parents('.login-form-container').find('#forgot-section');
			loginSection = $(this).parents('.login-form-container').find('#login-section');
			formTitle = $('#login-modal-title');
			
			if($(this).attr('id')=='show-forgot-form')
			{
				el = forgotSection.clone().appendTo('body');
				autoHeight = el.css('height', 'auto').height();
				el.remove();
				loginSection.animate({ height: 0, 'min-height': 0 }, 300);
				forgotSection.animate({'min-height': autoHeight}, 300, function(){
					$(this).css('height', 'auto');
				});
				formTitle.text('Quên mật khẩu');
			}
			else
			{
				el = loginSection.clone().appendTo('body');
				autoHeight = el.css('height', 'auto').height();
				el.remove();
				forgotSection.animate({ height: 0, 'min-height': 0 }, 300);
				loginSection.animate({'min-height': autoHeight}, 300, function(){
					$(this).css('height', 'auto');
				});
				formTitle.text('Đăng nhập');
			}
		});
		
		$('.show-normal-login').click(function(){
			$(this).parents('.login-form-container').find('.normal-login-container').slideToggle('fast');
		});
		
		$('#change-password2').click(function(){
		buildDialog({
			title: 'Thay đổi mật khẩu', 
			url: 'partner/changePassword', 
			width: 450, 
			submitText: 'Thay đổi',
			callback: function(){
						if($('#new-password').val()=='' || $('#current-password').val()=='')
						{
							showDialogMessage(['error', 'Vui lòng nhập đủ thông tin']);
						}
						else if($('#new-password').val()!=$('#renew-password').val())
						{
							showDialogMessage(['error', 'Hai mật khẩu phải giống nhau']);
						}
						else
						{
							postData = {
											'cpwd': $('#current-password').val(),
											'npwd': $('#new-password').val(),
											'rnpwd': $('#renew-password').val()
									   };
							$.post(PLS.ajaxUrl+'partner/changePassword', postData, function(response){
								postResult = JSON.parse(response);
								if(postResult.code==1)
								{
									showDialogMessage(['success', postResult.mess, true]);
								}
								else
								{
									showDialogMessage(['error', postResult.mess]);
								}
							});
						}
					}
		});
	});
	
	
		
});

	function validateEmail(email) {
		var re = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i;
		return re.test(email);
	}
	
	// function emailExists(email){
		// var exists = false;
		// getEmail(email, function(state){
			// if(state==0)
			// {
				// exists = true;
			// }
			// console.log(exists+'in');
		// });
		// return exists;
	// }
	
	function checkEmail(email)
	{
		if(email.length>0)
		{
			if(!validateEmail(email))
			{
				$('#email-error').html('Email không hợp lệ').show();
			}
			else
			{
				emailExists(email, function(exists){
					if(exists==true)
					{
						$('#email-error').html('Email này đã được sử dụng').show();
					}
					else
					{
						$('#email-error').hide();
					}
				});
			}
		}
		else
		{
			$('#email-error').hide();
		}
	}
	
	function checkPhone(phone)
	{
		if(phone.length>0)
		{
			if($.isNumeric(phone)==false)
			{
				$('#phone-error').html('Số điện thoại không hợp lệ').show();
			}	
			else
			{
				phoneExists(phone, function(exists){
					if(exists==true)
					{
						$('#phone-error').html('Số điện thoại này đã được sử dụng').show();
					}
					else
					{
						$('#phone-error').hide();
					}
				});
			}
		}
		else
		{
			$('#phone-error').hide();
		}
	}
	
	function check2Password(pwd, rpwd)
	{
		if(pwd.length==0)
		{
			$('#password-error').html('Mật khẩu không được bỏ trống').show();
		}
		else if(pwd != rpwd)
		{
			$('#password-error').html('Hai mật khẩu không khớp').show();
		}
		else
		{
			$('#password-error').hide();
		}	
	}
	
	function emailExists(email, callback)
	{
		var state;
		$.ajax({
			type: 'POST',
			url: PLS.ajaxUrl+'people/emailCheck',
			data: {'email': email},
			success: function(response){
				response = JSON.parse(response);
				if(response.code==0)
				{
					state=true;
				}
				else
				{
					state=false;
				}
				callback(state);
			}
		});
	}
	
	function phoneExists(phone, callback)
	{
		var state;
		$.ajax({
			type: 'POST',
			url: PLS.ajaxUrl+'people/phoneCheck',
			data: {'phone': phone},
			success: function(response){
				response = JSON.parse(response);
				if(response.code==0)
				{
					state=true;
				}
				else
				{
					state=false;
				}
				callback(state);
			}
		});
	}